/**
 * This file is generated by scripts/generate-agent-api.mjs
 * Source: api-docs/agent_OpenAPI.json
 * Do not edit manually.
 */
/* eslint-disable */
import { apiClient } from '../lib/api';

// Generated from OpenAPI components.schemas

export interface AgentUpdateDTO {
  agentCode?: string;
  agentName?: string;
  asrModelId?: string;
  vadModelId?: string;
  llmModelId?: string;
  vllmModelId?: string;
  ttsModelId?: string;
  ttsVoiceId?: string;
  memModelId?: string;
  intentModelId?: string;
  functions?: FunctionInfo[];
  systemPrompt?: string;
  summaryMemory?: string;
  chatHistoryConf?: number;
  langCode?: string;
  language?: string;
  sort?: number;
}

export interface FunctionInfo {
  pluginId?: string;
  paramInfo?: Record<string, any>;
}

export interface ResultVoid {
  code?: number;
  msg?: string;
  data?: any;
}

export interface AgentVoicePrintUpdateDTO {
  id?: string;
  audioId?: string;
  sourceName?: string;
  introduce?: string;
}

export interface AgentMemoryDTO {
  summaryMemory?: string;
}

export interface AgentCreateDTO {
  agentName: string;
}

export interface ResultString {
  code?: number;
  msg?: string;
  data?: string;
}

export interface AgentVoicePrintSaveDTO {
  agentId?: string;
  audioId?: string;
  sourceName?: string;
  introduce?: string;
}

export interface AgentChatHistoryReportDTO {
  macAddress: string;
  sessionId: string;
  chatType: string;
  content: string;
  audioBase64?: string;
  reportTime?: number;
}

export interface ResultBoolean {
  code?: number;
  msg?: string;
  data?: boolean;
}

export interface AgentInfoVO {
  id?: string;
  userId?: number;
  agentCode?: string;
  agentName?: string;
  asrModelId?: string;
  vadModelId?: string;
  llmModelId?: string;
  vllmModelId?: string;
  ttsModelId?: string;
  ttsVoiceId?: string;
  memModelId?: string;
  intentModelId?: string;
  chatHistoryConf?: number;
  systemPrompt?: string;
  summaryMemory?: string;
  langCode?: string;
  language?: string;
  sort?: number;
  creator?: number;
  createdAt?: string;
  updater?: number;
  updatedAt?: string;
  functions?: AgentPluginMapping[];
}

export interface AgentPluginMapping {
  id?: number;
  agentId?: string;
  pluginId?: string;
  paramInfo?: string;
  providerCode?: string;
}

export interface ResultAgentInfoVO {
  code?: number;
  msg?: string;
  data?: AgentInfoVO;
}

export interface AgentChatSessionDTO {
  sessionId?: string;
  createdAt?: string;
  chatCount?: number;
}

export interface PageDataAgentChatSessionDTO {
  total?: number;
  list?: AgentChatSessionDTO[];
}

export interface ResultPageDataAgentChatSessionDTO {
  code?: number;
  msg?: string;
  data?: PageDataAgentChatSessionDTO;
}

export interface AgentChatHistoryDTO {
  createdAt?: string;
  chatType?: string;
  content?: string;
  audioId?: string;
  macAddress?: string;
}

export interface ResultListAgentChatHistoryDTO {
  code?: number;
  msg?: string;
  data?: AgentChatHistoryDTO[];
}

export interface AgentChatHistoryUserVO {
  content?: string;
  audioId?: string;
}

export interface ResultListAgentChatHistoryUserVO {
  code?: number;
  msg?: string;
  data?: AgentChatHistoryUserVO[];
}

export interface AgentVoicePrintVO {
  id?: string;
  audioId?: string;
  sourceName?: string;
  introduce?: string;
  createDate?: string;
}

export interface ResultListAgentVoicePrintVO {
  code?: number;
  msg?: string;
  data?: AgentVoicePrintVO[];
}

export interface AgentTemplateEntity {
  id?: string;
  agentCode?: string;
  agentName?: string;
  asrModelId?: string;
  vadModelId?: string;
  llmModelId?: string;
  vllmModelId?: string;
  ttsModelId?: string;
  ttsVoiceId?: string;
  memModelId?: string;
  intentModelId?: string;
  chatHistoryConf?: number;
  systemPrompt?: string;
  summaryMemory?: string;
  langCode?: string;
  language?: string;
  sort?: number;
  creator?: number;
  createdAt?: string;
  updater?: number;
  updatedAt?: string;
}

export interface ResultListAgentTemplateEntity {
  code?: number;
  msg?: string;
  data?: AgentTemplateEntity[];
}

export interface ResultListString {
  code?: number;
  msg?: string;
  data?: string[];
}

export interface AgentDTO {
  id?: string;
  agentName?: string;
  ttsModelName?: string;
  ttsVoiceName?: string;
  llmModelName?: string;
  vllmModelName?: string;
  memModelId?: string;
  systemPrompt?: string;
  summaryMemory?: string;
  lastConnectedAt?: string;
  deviceCount?: number;
}

export interface ResultListAgentDTO {
  code?: number;
  msg?: string;
  data?: AgentDTO[];
}

export interface AgentEntity {
  id?: string;
  userId?: number;
  agentCode?: string;
  agentName?: string;
  asrModelId?: string;
  vadModelId?: string;
  llmModelId?: string;
  vllmModelId?: string;
  ttsModelId?: string;
  ttsVoiceId?: string;
  memModelId?: string;
  intentModelId?: string;
  chatHistoryConf?: number;
  systemPrompt?: string;
  summaryMemory?: string;
  langCode?: string;
  language?: string;
  sort?: number;
  creator?: number;
  createdAt?: string;
  updater?: number;
  updatedAt?: string;
}

export interface PageDataAgentEntity {
  total?: number;
  list?: AgentEntity[];
}

export interface ResultPageDataAgentEntity {
  code?: number;
  msg?: string;
  data?: PageDataAgentEntity;
}


/** 获取智能体详情 */
export const getAgentById = async (path: { id: string }): Promise<ResultAgentInfoVO> => {
  const response = await apiClient.get<ResultAgentInfoVO>(`/agent/${path.id}`);
  return response.data as ResultAgentInfoVO;
};


/** 更新智能体 */
export const update = async (path: { id: string }, body: AgentUpdateDTO): Promise<ResultVoid> => {
  const response = await apiClient.put<ResultVoid>(`/agent/${path.id}`, body);
  return response.data as ResultVoid;
};


/** 删除智能体 */
export const _delete = async (path: { id: string }): Promise<ResultVoid> => {
  const response = await apiClient.delete<ResultVoid>(`/agent/${path.id}`);
  return response.data as ResultVoid;
};


/** 更新智能体的对应声纹 */
export const update_1 = async (body: AgentVoicePrintUpdateDTO): Promise<ResultVoid> => {
  const response = await apiClient.put<ResultVoid>(`/agent/voice-print`, body);
  return response.data as ResultVoid;
};


/** 创建智能体的声纹 */
export const save = async (body: AgentVoicePrintSaveDTO): Promise<ResultVoid> => {
  const response = await apiClient.post<ResultVoid>(`/agent/voice-print`, body);
  return response.data as ResultVoid;
};


/** 根据设备id更新智能体 */
export const updateByDeviceId = async (path: { macAddress: string }, body: AgentMemoryDTO): Promise<ResultVoid> => {
  const response = await apiClient.put<ResultVoid>(`/agent/saveMemory/${path.macAddress}`, body);
  return response.data as ResultVoid;
};


/** 创建智能体 */
export const save_1 = async (body: AgentCreateDTO): Promise<ResultString> => {
  const response = await apiClient.post<ResultString>(`/agent`, body);
  return response.data as ResultString;
};


/** 小智服务聊天上报请求 */
export const uploadFile = async (body: AgentChatHistoryReportDTO): Promise<ResultBoolean> => {
  const response = await apiClient.post<ResultBoolean>(`/agent/chat-history/report`, body);
  return response.data as ResultBoolean;
};


/** 获取音频下载ID */
export const getAudioId = async (path: { audioId: string }): Promise<ResultString> => {
  const response = await apiClient.post<ResultString>(`/agent/audio/${path.audioId}`, undefined);
  return response.data as ResultString;
};


/** 获取智能体会话列表 */
export const getAgentSessions = async (path: { id: string }, query?: { page?: any; limit?: any }): Promise<ResultPageDataAgentChatSessionDTO> => {
  const response = await apiClient.get<ResultPageDataAgentChatSessionDTO>(`/agent/${path.id}/sessions`, { params: query });
  return response.data as ResultPageDataAgentChatSessionDTO;
};


/** 获取智能体聊天记录 */
export const getAgentChatHistory = async (path: { id: string; sessionId: string }): Promise<ResultListAgentChatHistoryDTO> => {
  const response = await apiClient.get<ResultListAgentChatHistoryDTO>(`/agent/${path.id}/chat-history/${path.sessionId}`);
  return response.data as ResultListAgentChatHistoryDTO;
};


/** 获取智能体聊天记录（用户） */
export const getRecentlyFiftyByAgentId = async (path: { id: string }): Promise<ResultListAgentChatHistoryUserVO> => {
  const response = await apiClient.get<ResultListAgentChatHistoryUserVO>(`/agent/${path.id}/chat-history/user`);
  return response.data as ResultListAgentChatHistoryUserVO;
};


/** 获取音频内容 */
export const getContentByAudioId = async (path: { id: string }): Promise<ResultString> => {
  const response = await apiClient.get<ResultString>(`/agent/${path.id}/chat-history/audio`);
  return response.data as ResultString;
};


/** 获取用户指定智能体声纹列表 */
export const list = async (path: { id: string }): Promise<ResultListAgentVoicePrintVO> => {
  const response = await apiClient.get<ResultListAgentVoicePrintVO>(`/agent/voice-print/list/${path.id}`);
  return response.data as ResultListAgentVoicePrintVO;
};


/** 智能体模板模板列表 */
export const templateList = async (): Promise<ResultListAgentTemplateEntity> => {
  const response = await apiClient.get<ResultListAgentTemplateEntity>(`/agent/template`);
  return response.data as ResultListAgentTemplateEntity;
};


/** 播放音频 */
export const playAudio = async (path: { uuid: string }): Promise<string> => {
  const response = await apiClient.get<string>(`/agent/play/${path.uuid}`);
  return response.data as string;
};


/** 获取智能体的Mcp工具列表 */
export const getAgentMcpToolsList = async (path: { agentId: string }): Promise<ResultListString> => {
  const response = await apiClient.get<ResultListString>(`/agent/mcp/tools/${path.agentId}`);
  return response.data as ResultListString;
};


/** 获取智能体的Mcp接入点地址 */
export const getAgentMcpAccessAddress = async (path: { agentId: string }): Promise<ResultString> => {
  const response = await apiClient.get<ResultString>(`/agent/mcp/address/${path.agentId}`);
  return response.data as ResultString;
};


/** 获取用户智能体列表 */
export const getUserAgents = async (): Promise<ResultListAgentDTO> => {
  const response = await apiClient.get<ResultListAgentDTO>(`/agent/list`);
  return response.data as ResultListAgentDTO;
};


/** 智能体列表（管理员） */
export const adminAgentList = async (query?: { page?: any; limit?: any }): Promise<ResultPageDataAgentEntity> => {
  const response = await apiClient.get<ResultPageDataAgentEntity>(`/agent/all`, { params: query });
  return response.data as ResultPageDataAgentEntity;
};


/** 删除智能体对应声纹 */
export const delete_1 = async (path: { id: string }): Promise<ResultVoid> => {
  const response = await apiClient.delete<ResultVoid>(`/agent/voice-print/${path.id}`);
  return response.data as ResultVoid;
};


export const agentAPI = {
  getAgentById,
  update,
  _delete,
  update_1,
  save,
  updateByDeviceId,
  save_1,
  uploadFile,
  getAudioId,
  getAgentSessions,
  getAgentChatHistory,
  getRecentlyFiftyByAgentId,
  getContentByAudioId,
  list,
  templateList,
  playAudio,
  getAgentMcpToolsList,
  getAgentMcpAccessAddress,
  getUserAgents,
  adminAgentList,
  delete_1,
};
